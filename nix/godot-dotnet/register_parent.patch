diff --git a/global.json b/global.json
index 5f74b4c..bb77a2a 100644
--- a/global.json
+++ b/global.json
@@ -1,9 +1,9 @@
 {
 	"sdk": {
-		"version": "8.0.200",
+		"version": "8.0.401",
 		"rollForward": "latestFeature"
 	},
 	"tools": {
-		"dotnet": "8.0.200"
+		"dotnet": "8.0.401"
 	}
 }
diff --git a/src/Godot.SourceGenerators/EntryPointGenerator.cs b/src/Godot.SourceGenerators/EntryPointGenerator.cs
index be00efc..72efe96 100644
--- a/src/Godot.SourceGenerators/EntryPointGenerator.cs
+++ b/src/Godot.SourceGenerators/EntryPointGenerator.cs
@@ -1,4 +1,6 @@
+using System.Collections.Generic;
 using System.Collections.Immutable;
+using System.Linq;
 using System.Text;
 using System.Threading;
 using Microsoft.CodeAnalysis;
@@ -25,12 +27,56 @@ internal sealed class EntryPointGenerator : IIncrementalGenerator
             .Collect()
             .Select((topLevelAttrs, ct) => !topLevelAttrs.IsEmpty);
 
-        IncrementalValueProvider<ImmutableArray<GodotRegistrationSpec?>> registrationSpecs = context.SyntaxProvider
+        IncrementalValueProvider<ImmutableArray<GodotRegistrationSpec>> registrationSpecs = context.SyntaxProvider
             .ForAttributeWithMetadataName(KnownTypeNames.GodotClassAttribute,
                 predicate: IsSyntaxTargetForGeneration,
                 transform: GetSemanticTargetForGeneration)
             .Where(spec => spec is not null)
-            .Collect();
+            .Collect()
+            //sort for parent classes to to be registered before child classes
+            .Select((spec, ct) =>
+            {
+                Dictionary<string, GodotRegistrationSpec> parentTree = [];
+                Dictionary<string, int> dependencyTree = [];
+
+                foreach (var nullable in spec)
+                {
+                    var type = nullable!.Value;
+
+                    parentTree.Add(type.FullyQualifiedSymbolName, type);
+
+                    int dependencies = 1;
+                    if (dependencyTree.TryGetValue(type.FullyQualifiedSymbolName, out var children))
+                    {
+                        dependencies = children + 1;
+                    }
+                    else
+                    {
+                        dependencyTree.Add(type.FullyQualifiedSymbolName, 0);
+                    }
+
+                    string parent = type.FullyQualifiedParentName;
+                    while (parentTree.TryGetValue(parent, out var parentType))
+                    {
+                        dependencyTree[parent] += dependencies;
+                        parent = parentType.FullyQualifiedParentName;
+                    }
+
+                    if (dependencyTree.ContainsKey(parent))
+                    {
+                        dependencyTree[parent] += dependencies;
+                    }
+                    else
+                    {
+                        dependencyTree.Add(parent, dependencies);
+                    }
+                }
+
+                return parentTree
+                    .OrderByDescending(pair => dependencyTree[pair.Key])
+                    .Select(spec => spec.Value)
+                    .ToImmutableArray();
+            });
 
         var assemblySpec = assemblyName
             .Combine(disableGodotEntryPointGeneration)
diff --git a/src/Godot.SourceGenerators/SpecCollectors/RegistrationSpecCollector.cs b/src/Godot.SourceGenerators/SpecCollectors/RegistrationSpecCollector.cs
index 4a555d7..4aa998e 100644
--- a/src/Godot.SourceGenerators/SpecCollectors/RegistrationSpecCollector.cs
+++ b/src/Godot.SourceGenerators/SpecCollectors/RegistrationSpecCollector.cs
@@ -15,6 +15,12 @@ internal static class RegistrationSpecCollector
             return null;
         }
 
+        if (typeSymbol.BaseType is null)
+        {
+            // Attribute has been placed on an interface.
+            return null;
+        }
+
         bool? isTool = null;
 
         foreach (var (key, constant) in attribute.NamedArguments)
@@ -37,6 +43,7 @@ internal static class RegistrationSpecCollector
         {
             SymbolName = typeSymbol.Name,
             FullyQualifiedSymbolName = typeSymbol.FullNameWithGlobal(),
+            FullyQualifiedParentName = typeSymbol.BaseType.FullNameWithGlobal(),
             RegistrationKind = registrationKind,
         };
     }
diff --git a/src/Godot.SourceGenerators/Specs/GodotRegistrationSpec.cs b/src/Godot.SourceGenerators/Specs/GodotRegistrationSpec.cs
index 4c6c5f4..d62d71c 100644
--- a/src/Godot.SourceGenerators/Specs/GodotRegistrationSpec.cs
+++ b/src/Godot.SourceGenerators/Specs/GodotRegistrationSpec.cs
@@ -49,6 +49,11 @@ internal readonly record struct GodotRegistrationSpec : IEquatable<GodotRegistra
     /// </summary>
     public required string FullyQualifiedSymbolName { get; init; }
 
+    /// <summary>
+    /// Fully qualified name of the type's parent type's symbol, including the global namespace.
+    /// </summary>
+    public required string FullyQualifiedParentName { get; init; }
+
     /// <summary>
     /// Indicates the kind of registration that this specification represents.
     /// </summary>
